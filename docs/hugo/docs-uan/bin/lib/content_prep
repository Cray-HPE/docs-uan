#!/bin/usr/env bash

function make_new_title() {
    # Remove "CSM", extra spaces, number signs, html, and colons.
    # Change underscores to spaces. Capitalize acronyms.
    echo "${1}" | \
    sed -r 's`^#+ ``' | \
    sed -r 's`CSM\b``' | sed 's`csm\b``g' | sed 's`()``g' | \
    sed -r 's`^ +``' | \
    sed 's`:``g' | \
    sed 's`_` `g' | \
    sed -r 's`<.*>.*<.*>``' | \
    sed 's`\\(`(`g' | sed 's`\\)`)`g' | \
    sed -r 's`[S,s]ls\b`SLS`' | \
    sed -r 's`[T,s]ls\b`TLS`' | \
    sed -r 's`[P,p]ki\b`PKI`' | \
    sed -r 's`[S,s]sh\b`SSH`' | \
    sed -r 's`[U,u]an\b`UAN`' | \
    sed -r 's`[U,u]ans\b`UANs`' | \
    sed -r 's`[U,u]ai\b`UAI`' | \
    sed -r 's`[U,u]ais\b`UAIs`' | \
    sed -r 's`[U,u]as\b`UAS`' | \
    sed -r 's`[B,b]mc\b`BMC`' | \
    sed -r 's`[H,h]ttps`HTTPS`' | \
    sed -r 's`[H,h]ttp`HTTP`' | \
    sed -r 's`[L,l]dap`LDAP`' | \
    sed -r 's`[R,r]eds\b`REDS`' | \
    sed -r 's`[M,m]eds\b`MEDS`' | \
    sed -r 's`[N,n]tp\b`NTP`' | \
    sed -r 's`[C,c]apmc\b`CAPMC`' | \
    sed -r 's`[K,k]vm\b`KVM`' | \
    sed -r 's`[G,g]pu\b`GPU`' | \
    sed -r 's`[H,h]sn\b`HSN`' | \
    sed -r 's`[H,h]sm\b`HSM`' | \
    sed -r 's`[N,n]ic\b`NIC`' | \
    sed -r 's`[N,n]cn\b`NCN`' | \
    sed -r 's`[B,b]gp\b`BGP`' | \
    sed -r 's`[D,d]ns\b`DNS`' | \
    sed -r 's`[D,d]hcp\b`DHCP`' | \
    sed -r 's`[H,h]pe\b`HPE`' | \
    sed -r 's`[I,i]ms\b`IMS`' | \
    sed -r 's`[F,f]as\b`FAS`' | \
    sed -r 's`[C,c]fs\b`CFS`' | \
    sed -r 's`[B,b]os\b`BOS`' | \
    sed -r 's`[C,c]rus\b`CRUS`' | \
    sed -r 's`[C,c]an\b`CAN`' | \
    sed -r 's`[P,p]xe\b`PXE`' | \
    sed -r 's`[I,i]lo\b`iLO`' | \
    sed -r 's`[B,b]ios\b`BIOS`' | \
    sed -r 's`[C,c]os\b`COS`' | \
    sed -r 's`[S,s]les\b`SLES`' | \
    sed -r 's`[P,p]am\b`PAM`' | \
    sed -r 's`[A,a]cl\b`ACL`' | \
    tr -d "\r"
}

function transform_links() {
    # Remove .md suffixes from links and lowercase text.
    # $1 is the file content

    # Adds hugo's relref function to transform relative links during build step.
    # e.g. [Who]({{< relref "./about.md#who" >}})
    # Converts:
    # - Skips internal stash links
    # - root links to relative links
    # - add "../" to all non-root links since pubs make all link referenced from the parent directory
    # sed -r 's|\]\(([A-Za-z0-9_\-]+)\/|\]\(\.\.\/\1\/|g' | \
    # - wraps links in hugo's relref lookup unless it has "http"
    # - fixes image references
    # - replaces <a name="anchor"> format for hugo anchor ref formats
    # - changes index.md to '' - for some reason Hugo silently puts empty href, if source href points
    #   to _index.md file. So we just point to directory instead.
    cat $1 | \
    grep -v "stash.us.cray.com" | \
    sed -r 's|\]\(\/|\]\(\.\/|g' | \
    sed -r 's|\]\(([^)|:]*).md(#.*)?\)|\]\(\{\{\< relref \"\.\/\1.md\2\" \>\}\}\)|g' | \
    sed -r 's|\]\(([^)|:]*)\.(png\|svg)(#.*)?\)|\]\(\.\./\1\.\2\)|g' | \
    sed -rz 's|<a name="([^"]*)"></a>\s*\n(\s*#+ [^\n]*)|\2 {#\1}|g' | \
    sed 's|\"\"|\"|g' | \
    sed 's|index.md||g'
}

function gen_dynamic_toc(){
    python3 /src/bin/gen-hugo-toc-json.py
}

function gen_hugo_yaml() {
    HUGO_TOC="/src/bin/hugo_toc.json"
    [[ -f $DOCSOURCE/hugo_toc.json ]] && HUGO_TOC="$DOCSOURCE/hugo_toc.json"
    rm -f /tmp/have_weight
    cat ${HUGO_TOC} | jq -r '.[]|[.title, .weight]|@tsv' |
        while IFS=$'\t' read -r title weight; do
            toc_title=$(echo "$title" | awk '{print tolower($0)}')
            given_title=$(echo "$1" | awk '{print tolower($0)}')
            if [[ "${toc_title}" == "${given_title}" ]]; then
                myweight="$weight"
                gen_weighted_header "$1" "$myweight"
                touch /tmp/have_weight
                break
            fi
        done
    if [[ ! -f /tmp/have_weight ]]; then
        gen_unweighted_header "$1"
    fi
    rm -f /tmp/have_weight
}

function gen_weighted_header() {
    cat <<-YAML
---
menuTitle: "$1"
date: $(date)
draft: false
weight: $2
---
YAML
}

function gen_unweighted_header() {
    cat <<-YAML
---
menuTitle: "$1"
date: $(date)
draft: false
---
YAML
}

function gen_index_header() {
    cat <<-YAML
# $1
## Topics:
YAML
}

#function gen_index_content() {
#    # e.g. 1. [Prepare Configuration Payload](prepare_configuration_payload)
#    for f in $(ls $1/)
#    do
#        if [[ $f != "_index.md" ]] && [[ "${f: -3}" == ".md" ]] || \
#        [[ -d ${1}/$f ]] && [[ ! $(echo $f | grep -E "(^img$|^scripts$)") ]]; then
#            f=$(echo $f | sed 's`.md``' | awk '{print tolower($0)}')
#            echo "1. [$(make_new_title ${f})](${f})"
#        fi
#    done
#}

function gen_index_content() {
    # e.g. 1. [Prepare Configuration Payload](prepare_configuration_payload)
    HUGO_TOC="/src/bin/hugo_toc.json"
    [[ -f $DOCSOURCE/hugo_toc.json ]] && HUGO_TOC="$DOCSOURCE/hugo_toc.json"
    cat $HUGO_TOC | jq -r '.[]|[.dir, .toc]|flatten|@tsv' |
      while IFS=$'\t' read -r dir toc; do
        if [[ "$dir" == "$(basename $1)" ]]; then
            for topic in $toc; do
                oldtitle=$(get_old_title ${1}/${topic})
                newtitle=$(make_new_title "${oldtitle}")
                f=$(echo ${topic} | sed 's`.md``' | awk '{print tolower($0)}')
                echo "1. [${newtitle}](${f})"
            done
        fi
      done
}

function gen_toc() {
    HUGO_TOC="/src/bin/hugo_toc.json"
    [[ -f $DOCSOURCE/hugo_toc.json ]] && HUGO_TOC="$DOCSOURCE/hugo_toc.json"
    cat <<-YAML 
# Cray EX User Access Nodes Installation and Administration Guide

This document describes the installation prequisites, installation procedures,
and operational procedures for Cray EX User Access Nodes (UAN).

The latest version of this documentation is available [here](https://cray-hpe.github.io/docs-uan).

## Table of Contents

### Topics:

YAML
    cat $HUGO_TOC | jq -r '.[]|[.dir, .title, .toc]|flatten|@tsv' |
        while IFS=$'\t' read -r dir title toc; do
            if [[ $toc != "" ]]; then
                echo "#### [${title}](${dir})"
                for t in ${toc}; do
                    oldtitle=$(get_old_title ${1}/${dir}/${t})
                    newtitle=$(make_new_title "${oldtitle}")
                    f=$(echo ${t} | sed 's`.md``' | awk '{print tolower($0)}')
                    echo "1. [${newtitle}](${dir}/${f})"
                done
                echo ""
            fi
        done
}